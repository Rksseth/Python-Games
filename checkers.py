'''CheckersMay 8'''from tkinter import*root = Tk()root.title("Checkers - TWO Player")class Piece(object):    def __init__(self):        self.x = 0        self.y = 0        self.isBlack = 0         self.isKing = 0        self.p = Button(root,width = 2)class Game(object):    def __init__(self):        self.gridSize = 8        self.grid = [[0 for x in range(0,self.gridSize)] for y in range(0,self.gridSize)]        self.squares = [[0 for x in range(0,self.gridSize)] for y in range(0,self.gridSize)]        self.turn = 0 #DETERMINES whose turn it is        self.move = 0 #DETERMINES what piece to move                self.directionIdxs = []                self.setup()            def setup(self):        root.geometry(str(self.gridSize*30)+'x'+str(self.gridSize*30))                #SETUP valid squares        blackSquare = 0        for row in range(0,self.gridSize):            for col in range(0,self.gridSize):                if blackSquare:                    self.squares[row][col] = 1                blackSquare = not blackSquare            blackSquare = not blackSquare        #SETUP pieces        for row in range(0,1):            for col in range(0,self.gridSize):                if self.squares[row][col]:                    newPiece = Piece()                    newPiece.x = col                    newPiece.y = row                    newPiece.isBlack = 1                    self.grid[row][col] = newPiece        for row in range(self.gridSize-1,self.gridSize):            for col in range(0,self.gridSize):                if self.squares[row][col]:                    newPiece = Piece()                    newPiece.x = col                    newPiece.y = row                    newPiece.isBlack = 0                    self.grid[row][col] = newPiece        return 1            def printBoard(self):        '''        print(" ",end=" ")        for a in range(0,8):            print(a,end= " ")        print()        '''        for row in range(0,self.gridSize):            #print(row,end=" ")            for col in range(0,self.gridSize):                item = self.grid[row][col]                text = ""                                l = Button(root,width = 2)                if item:                    if item.isKing:                        text+= "K"                    if item.isBlack:                        text += "B"                        #print("B",end=" ")                    else:                        text += "W"                        #print("W",end=" ")                    item.p['text'] = text                    if self.squares[row][col]:                        l['bg'] = 'grey50'                    else:                        l['bg'] = 'salmon1'                                                  if item.isBlack:                        l['fg'] = 'black'                    else:                        l['fg'] = 'salmon1'                                    else:                    text = ""                    #print(".",end=" ")                    l = Button(root,text = text,width = 2)                    if self.squares[row][col]:                        l['bg'] = 'grey50'                    else:                        l['bg'] = 'salmon1'                l['command'] = lambda four = (col,row):self.movePiece(four[0],four[1])                l['text'] = text                                  l.place(x = col*30,y= row*30)                                                #print()        return 1    def validIdx(self,x,y):        if x>=0 and x< self.gridSize and y>=0 and y<self.gridSize:            if self.squares[y][x]:                return True        return False    def getTurn(self):        x = input("x : ")        y = input("y : ")        try:            x = int(x)            y = int(y)            return x,y        except ValueError:            print("NOT AN INT")            return -1,-1    def movePiece(self,x,y):        if not self.validIdx(x,y):            return False        if self.grid[y][x]: #IS A PIECE            if (not self.turn and self.grid[y][x].isBlack) or (self.turn and not self.grid[y][x].isBlack):                #print('PIECE DETECTED')                self.move = self.grid[y][x]            return False        elif not self.move:            return False        else:            #print('SPOT TO MOVE DETECTED')            #CHECK IF A VALID MOVE            goodMove = self.validMove(self.move.x,self.move.y,x,y,0)            if goodMove:                self.grid[self.move.y][self.move.x] = 0                movePiece = self.move                movePiece.x = x                movePiece.y = y                if (movePiece.isBlack and y == self.gridSize-1) or (not movePiece.isBlack and y == 0):                    movePiece.isKing = 1                self.grid[y][x] = movePiece                self.move = 0                self.printBoard()                self.turn = not self.turn                self.directionIdxs = []                self.gameDone()                return True            return False                def validMove(self,x0,y0,x1,y1,jump):        if x0 == x1 and y0 == y1:#CASE 1 - at spot            return 1                if not self.validIdx(x0,y0) or not self.validIdx(x1,y1): #CASE 2 - if not valid indices            return False        item = self.grid[y0][x0]        end = self.grid[y1][x1]                        if end and not jump:#CASE 3 - if end has a piece on it            return False                #CASE 4 - one spot away        if abs(x0-x1) == 1 and abs(y0-y1) == 1 and not jump:            if item.isKing:                return True            elif item.isBlack:                if (y0-y1) == -1:                    return True                else:                    return False            else:                if (y0-y1) == 1:                    return True                else:                    return False        #CASE 5 - two spots away:        elif abs(x0-x1) == 2 and abs(y0-y1) == 2:            if item.isKing:                dy = int((y0-y1)/2)*-1                dx = int((x0-x1)/2)*-1                #CHECK position to take                if self.validIdx(x0+dx,y0+dy):                    interItem = self.grid[y0+dy][x0+dx]                    if interItem:                        if (interItem.isBlack and self.turn) or (not interItem.isBlack and not self.turn):                            #NOW this piece is taken, so remove it                            self.grid[interItem.y][interItem.x] = 0                            return True                        if item.isBlack:                direction = -1            else:                direction = 1              if y0-y1 == direction*2:                dy = int((y0-y1)/2)*-1                #CHECK position to get take                dx = int((x0-x1)/2)*-1                if self.validIdx(x0+dx,y0+dy):                    interItem = self.grid[y0+dy][x0+dx]                    if interItem:                        if (interItem.isBlack and self.turn) or (not interItem.isBlack and not self.turn):                            #NOW this piece is taken, so remove it                                                        self.grid[interItem.y][interItem.x] = 0                            return True            return False                #CASE 6 - multiple jumps        else:            #print('JUMP IN PROGRESS')            directions = []            if item.isKing:                for dy in range(-1,2,2):                    for dx in range(-1,2,2):                        newX = item.x + dx                        newY = item.y + dy                        idx = [newX,newY]                        if idx not in self.directionIdxs and self.validIdx(newY,newX):                            interItem = self.grid[newY][newX]                            if interItem:                                if (interItem.isBlack and self.turn) or (not interItem.isBlack and not self.turn):#IF open spot                                    if self.validIdx(newX+dx,newY+dy):                                        self.directionIdxs.append(idx)                                        self.grid[y0][x0] = 0                                        item.x = newX + dx                                        item.y = newY + dy                                        self.grid[item.y][item.x] = item                                        add = self.validMove(item.x,item.y,x1,y1,1)                                        directions.append(add)                                                                                if not add:#IF not the right direction                                            self.grid[item.y][item.x] = 0                                            item.x = x0                                            item.y = y0                                            self.grid[y0][x0] = item                                        if add:                                            self.grid[interItem.y][interItem.x] = 0                for jump in directions:                    if jump:                        return True            else:                if item.isBlack:                    dy = 1                else:                    dy = -1                                   for dx in range(-1,2,2):                    newX = item.x + dx                    newY = item.y + dy                    idx = [newX,newY]                    if idx not in self.directionIdxs and self.validIdx(newY,newX):                        interItem = self.grid[newY][newX]                        if interItem:                            if (interItem.isBlack and self.turn) or (not interItem.isBlack and not self.turn):#IF open spot                                if self.validIdx(newX+dx,newY+dy):                                    self.directionIdxs.append(idx)                                    self.grid[y0][x0] = 0                                    item.x = newX + dx                                    item.y = newY + dy                                    self.grid[item.y][item.x] = item                                    add = self.validMove(item.x,item.y,x1,y1,1)                                    directions.append(add)                                                                        if not add:#IF not the right direction                                        self.grid[item.y][item.x] = 0                                        item.x = x0                                        item.y = y0                                        self.grid[y0][x0] = item                                    if add:                                        self.grid[interItem.y][interItem.x] = 0                for jump in directions:                    if jump:                        return True                                return False    def gameDone(self):        black = 0        notBlack = 0        for row in self.grid:            for item in row:                if item:                    if item.isBlack:                        black += 1                    else:                        notBlack += 1        if not black or not notBlack:            if black:                print('Black Wins')            else:                print('White Wins')            return True        return False    def updateKings(self):        for row in self.grid:            for item in row:                if item:                    item.isKing = 1                    if (item.isBlack and item.y == self.gridSize) or (not item.isBlack and item.y == 0):                        item.isKing = 1        for row in self.grid:            for item in row:                if item:                    if item.isKing:                        print("K",end=" ")                else:                    print(".",end= " ")            print()c = Game()c.printBoard()'''c.movePiece(3,2)c.movePiece(2,3)c.movePiece(6,5)c.movePiece(7,4)c.movePiece(2,3)c.movePiece(1,4)c.movePiece(7,4)c.movePiece(6,3)c.movePiece(2,1)c.movePiece(3,2)c.movePiece(2,5)c.movePiece(2,1)c.movePiece(5,2)c.movePiece(4,3)#c.movePiece(1,4)while not c.gameDone():    if not c.move:        if not c.turn:            print('BLACK TO MOVE')        else:            print('WHITE TO MOVE')    x,y = c.getTurn()    c.movePiece(x,y)'''